#!/usr/bin/env python3
"""
–ù–µ–π—Ä–æ–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ FAISS RAG
–§–∞–π–ª: lk_assistant/lk_assistant.py
"""

import sys
import json
import logging
from pathlib import Path
from typing import List, Dict, Any, Optional
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º faiss_vs –≤ –ø—É—Ç—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
sys.path.append(str(Path(__file__).parent.parent / "faiss_vs"))

from faiss_vs.src.document_processor import DocumentProcessor
from faiss_vs.src.config import settings

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class LKAssistant:
    """
    –ù–µ–π—Ä–æ–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç FAISS RAG –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö –∫–ª–∏–µ–Ω—Ç–∞
    """

    def __init__(self, client_id: str, assistant_name: str = "–ü–æ–º–æ—â–Ω–∏–∫ –õ–ö"):
        self.client_id = client_id
        self.assistant_name = assistant_name
        self.conversation_history = []

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        self.document_processor = DocumentProcessor(client_id=client_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        self.is_ready = self._check_client_data()

        logger.info(f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id}")

    def _check_client_data(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            stats = self.document_processor.get_index_statistics()
            if stats.get('status') == 'ready' and stats.get('total_chunks', 0) > 0:
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ {stats['total_chunks']} —á–∞–Ω–∫–æ–≤ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {self.client_id}")
                return True
            else:
                logger.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {self.client_id}")
                return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            return False

    def ask(self, question: str, context_limit: int = 3) -> Dict[str, Any]:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É

        Args:
            question: –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context_limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

        Returns:
            Dict —Å –æ—Ç–≤–µ—Ç–æ–º –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        """
        if not self.is_ready:
            return {
                'success': False,
                'answer': "–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –µ—â–µ –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                'sources': [],
                'error': 'no_data'
            }

        try:
            # –ò—â–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
            search_results = self.document_processor.search_documents(
                query=question,
                k=context_limit,
                min_score=0.1  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
            )

            if not search_results:
                return {
                    'success': True,
                    'answer': f"–Ø –Ω–µ –Ω–∞—à–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.",
                    'sources': [],
                    'query': question
                }

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            answer = self._generate_answer(question, search_results)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            self._add_to_history(question, answer, search_results)

            return {
                'success': True,
                'answer': answer,
                'sources': self._format_sources(search_results),
                'query': question,
                'found_documents': len(search_results)
            }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞: {e}")
            return {
                'success': False,
                'answer': "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                'sources': [],
                'error': str(e)
            }

    def _generate_answer(self, question: str, search_results: List[Dict]) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è, –ø–æ—Ç–æ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å LLM
        """
        if not search_results:
            return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–∞–º—ã–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã
        relevant_texts = []
        for result in search_results:
            text = result.get('text', '')
            score = result.get('score', 0)
            source = result.get('source_file', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫')

            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            relevant_texts.append(f"[–ò–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ '{source}'] {text[:300]}...")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        answer_parts = [
            f"–ù–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –≤–∞—à–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö:",
            "",
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã
        for i, text in enumerate(relevant_texts, 1):
            answer_parts.append(f"{i}. {text}")
            answer_parts.append("")

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ
        answer_parts.append(
            "üìù –≠—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –≤–∞—à–∏—Ö –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –ï—Å–ª–∏ –Ω—É–∂–Ω—ã —É—Ç–æ—á–Ω–µ–Ω–∏—è, –∑–∞–¥–∞–π—Ç–µ –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å.")

        return "\n".join(answer_parts)

    def _format_sources(self, search_results: List[Dict]) -> List[Dict]:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞"""
        sources = []
        for result in search_results:
            metadata = result.get('metadata', {})
            source = {
                'file': result.get('source_file', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–π–ª'),
                'score': round(result.get('score', 0), 3),
                'category': metadata.get('category', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'),
                'title': metadata.get('title', ''),
                'url': metadata.get('source_url', ''),
                'date': metadata.get('date', '')
            }
            sources.append(source)
        return sources

    def _add_to_history(self, question: str, answer: str, sources: List[Dict]):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        self.conversation_history.append({
            'timestamp': datetime.now().isoformat(),
            'question': question,
            'answer': answer,
            'sources_count': len(sources),
            'client_id': self.client_id
        })

    def get_client_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–∞–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞"""
        if not self.is_ready:
            return {'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞'}

        stats = self.document_processor.get_index_statistics()

        return {
            'client_id': self.client_id,
            'total_documents': stats.get('sources_count', 0),
            'total_chunks': stats.get('total_chunks', 0),
            'categories': list(stats.get('categories_distribution', {}).keys()),
            'conversation_history_length': len(self.conversation_history),
            'is_ready': self.is_ready
        }

    def search_by_category(self, query: str, category: str) -> Dict[str, Any]:
        """–ü–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        if not self.is_ready:
            return {'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞'}

        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            results = self.document_processor.search_documents(
                query=query,
                k=5,
                filters={'category': category}
            )

            return {
                'success': True,
                'results': results,
                'category': category,
                'found': len(results)
            }

        except Exception as e:
            return {'success': False, 'error': str(e)}

    def get_conversation_history(self, limit: int = 10) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        return self.conversation_history[-limit:] if limit else self.conversation_history

    def clear_history(self):
        """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        self.conversation_history = []
        logger.info(f"–ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –æ—á–∏—â–µ–Ω–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {self.client_id}")

    def suggest_questions(self) -> List[str]:
        """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if not self.is_ready:
            return ["–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ —Å–∏—Å—Ç–µ–º—É"]

        stats = self.document_processor.get_index_statistics()
        categories = list(stats.get('categories_distribution', {}).keys())

        suggestions = [
            "–ß—Ç–æ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ –º–æ–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö?",
            "–ü–æ–∫–∞–∂–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã",
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        for category in categories[:3]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            suggestions.append(f"–ß—Ç–æ –µ—Å—Ç—å –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'?")

        suggestions.extend([
            "–ù–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ",
            "–ü–æ–∫–∞–∂–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é",
            "–ï—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–Ω–∞—Ö?"
        ])

        return suggestions

    def get_available_categories(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        if not self.is_ready:
            return []

        stats = self.document_processor.get_index_statistics()
        return list(stats.get('categories_distribution', {}).keys())

    def get_recent_documents(self, limit: int = 5) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–µ–¥–∞–≤–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        if not self.is_ready:
            return []

        try:
            all_chunks = self.document_processor.faiss_manager.get_all_chunks()

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ñ–∞–π–ª–∞–º –∏ –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ
            files_info = {}
            for chunk in all_chunks:
                filename = chunk.get('source_file', '')
                if filename not in files_info:
                    metadata = chunk.get('metadata', {})
                    files_info[filename] = {
                        'filename': filename,
                        'category': metadata.get('category', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'),
                        'title': metadata.get('title', ''),
                        'date': metadata.get('processing_date', ''),
                        'chunks_count': 0
                    }
                files_info[filename]['chunks_count'] += 1

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ
            recent_files = sorted(
                files_info.values(),
                key=lambda x: x.get('date', ''),
                reverse=True
            )

            return recent_files[:limit]

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–¥–∞–≤–Ω–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
            return []