#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å –ø–æ–∏—Å–∫–æ–º —á–µ—Ä–µ–∑ API
–°–æ—Ö—Ä–∞–Ω–∏ –∫–∞–∫: faiss_vs/debug_search_api.py
"""

import sys
import requests
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent / "src"))

from src.document_processor import DocumentProcessor


def debug_search_api(client_id: str):
    """
    üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–∏—Å–∫–æ–º —á–µ—Ä–µ–∑ API
    """
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–û–ò–°–ö–ê –ß–ï–†–ï–ó API")
    print("=" * 60)

    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å –Ω–∞–ø—Ä—è–º—É—é
    print("üìä –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å –Ω–∞–ø—Ä—è–º—É—é")
    try:
        processor = DocumentProcessor(client_id=client_id)
        stats = processor.get_index_statistics()

        print(f"   –°—Ç–∞—Ç—É—Å –∏–Ω–¥–µ–∫—Å–∞: {stats.get('status', 'unknown')}")
        print(f"   –í—Å–µ–≥–æ –≤–µ–∫—Ç–æ—Ä–æ–≤: {stats.get('total_vectors', 0)}")
        print(f"   –í—Å–µ–≥–æ —á–∞–Ω–∫–æ–≤: {stats.get('total_chunks', 0)}")
        print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {stats.get('sources_count', 0)}")

        if stats.get('total_chunks', 0) == 0:
            print("   ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ò–Ω–¥–µ–∫—Å –ø—É—Å—Ç–æ–π!")
            return False
        else:
            print("   ‚úÖ –ò–Ω–¥–µ–∫—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ")

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω–¥–µ–∫—Å—É: {e}")
        return False

    # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–π –ø–æ–∏—Å–∫
    print("\nüîç –®–∞–≥ 2: –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–π –ø–æ–∏—Å–∫")
    test_queries = ["—Ñ–∞—Å–∞–¥", "—Ñ–æ—Ç–æ", "–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞", "–∑–¥–∞–Ω–∏–µ"]

    for query in test_queries:
        try:
            results = processor.search_documents(query, k=3)
            print(f"   –ó–∞–ø—Ä–æ—Å '{query}': –Ω–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

            if results:
                best = results[0]
                print(f"      –õ—É—á—à–∏–π: {best['source_file']} (score: {best.get('score', 0):.3f})")
                metadata = best.get('metadata', {})
                print(f"      –û–ø–∏—Å–∞–Ω–∏–µ: {metadata.get('title', '–ù–ï–¢')}")

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ '{query}': {e}")

    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º API endpoint
    print("\nüåê –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º API endpoint")
    api_url = "http://127.0.0.1:8000/faiss/search"

    test_payload = {
        "client_id": client_id,
        "query": "—Ñ–∞—Å–∞–¥"
    }

    try:
        response = requests.post(api_url, json=test_payload, timeout=10)
        print(f"   HTTP —Å—Ç–∞—Ç—É—Å: {response.status_code}")

        if response.status_code == 200:
            data = response.json()
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ API: {data.get('results_count', 0)}")

            if data.get('results_count', 0) == 0:
                print("   ‚ö†Ô∏è API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
                print("   üí° –ü—Ä–æ–±–ª–µ–º–∞ –≤ routes.py –∏–ª–∏ –ª–æ–≥–∏–∫–µ API")
            else:
                print("   ‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

        else:
            print(f"   ‚ùå API –æ—à–∏–±–∫–∞: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {e}")

    # 4. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    print("\nüìö –®–∞–≥ 4: –ü—Ä–∏–º–µ—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∏–Ω–¥–µ–∫—Å–µ")
    try:
        all_chunks = processor.faiss_manager.get_all_chunks()

        if all_chunks:
            print(f"   –í—Å–µ–≥–æ —á–∞–Ω–∫–æ–≤: {len(all_chunks)}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
            files = set()
            categories = set()

            for chunk in all_chunks:
                if chunk.get('source_file'):
                    files.add(chunk['source_file'])
                metadata = chunk.get('metadata', {})
                if metadata.get('category'):
                    categories.add(metadata['category'])

            print(f"   üìÅ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {len(files)}")
            print(f"   üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}")

            print("\n   üìÑ –ü—Ä–∏–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤:")
            for i, filename in enumerate(list(files)[:5]):
                print(f"      {i + 1}. {filename}")

            print("\n   üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:")
            for category in list(categories)[:5]:
                print(f"      - {category}")

            # –ò—â–µ–º —Ñ–∞–π–ª—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π/—Ñ–∞—Å–∞–¥–∞–º–∏
            print("\n   üèóÔ∏è –§–∞–π–ª—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π:")
            arch_files = [f for f in files if any(word in f.lower()
                                                  for word in ['–∞—Ä—Ö–∏—Ç–µ–∫—Ç', '—Ñ–∞—Å–∞–¥', '–ø–ª–∞–Ω', '–ø—Ä–æ–µ–∫—Ç', '–∫–æ–Ω—Ü–µ–ø—Ü'])]

            if arch_files:
                for filename in arch_files[:3]:
                    print(f"      üìê {filename}")
            else:
                print("      ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –ø–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ")

        else:
            print("   ‚ùå –ù–µ—Ç —á–∞–Ω–∫–æ–≤ –≤ –∏–Ω–¥–µ–∫—Å–µ")

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞–Ω–∫–æ–≤: {e}")

    return True


def check_routes_py():
    """
    üìù –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª routes.py
    """
    print("\nüìù –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä—è–µ–º routes.py")

    routes_path = Path("routes.py")
    if not routes_path.exists():
        routes_path = Path("faiss_vs/routes.py")

    if routes_path.exists():
        print(f"   üìÑ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {routes_path}")

        with open(routes_path, 'r', encoding='utf-8') as f:
            content = f.read()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ search endpoint
        if '/faiss/search' in content:
            print("   ‚úÖ Endpoint /faiss/search –Ω–∞–π–¥–µ–Ω")

            # –ò—â–µ–º —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é
            if 'search_documents' in content:
                print("   ‚úÖ –í—ã–∑–æ–≤ search_documents –Ω–∞–π–¥–µ–Ω")
            else:
                print("   ‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ –Ω–µ—Ç –≤—ã–∑–æ–≤–∞ search_documents")

            if 'DocumentProcessor' in content:
                print("   ‚úÖ Import DocumentProcessor –Ω–∞–π–¥–µ–Ω")
            else:
                print("   ‚ùå –ù–ï–¢ import DocumentProcessor!")

        else:
            print("   ‚ùå Endpoint /faiss/search –ù–ï –ù–ê–ô–î–ï–ù!")

    else:
        print("   ‚ùå –§–∞–π–ª routes.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")


def suggest_fixes():
    """
    üí° –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    """
    print("\nüí° –í–û–ó–ú–û–ñ–ù–´–ï –†–ï–®–ï–ù–ò–Ø:")
    print("=" * 40)

    print("1. üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä:")
    print("   cd /path/to/project")
    print("   python main.py")

    print("\n2. üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ routes.py:")
    print("   - –ï—Å—Ç—å –ª–∏ endpoint /faiss/search")
    print("   - –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –ª–∏ DocumentProcessor")
    print("   - –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ª–∏ search_documents")

    print("\n3. üóÇÔ∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω–¥–µ–∫—Å:")
    print("   python check_metadata.py 6a2502fa-caaa-11e3-9af3-e41f13beb1d2")

    print("\n4. üîç –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ø–æ–∏—Å–∫ –Ω–∞–ø—Ä—è–º—É—é:")
    print("   python -c \"")
    print("   from src.document_processor import DocumentProcessor")
    print("   p = DocumentProcessor('6a2502fa-caaa-11e3-9af3-e41f13beb1d2')")
    print("   print(p.search_documents('—Ñ–∞—Å–∞–¥', k=3))")
    print("   \"")


if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python debug_search_api.py <client_id>")
        sys.exit(1)

    client_id = sys.argv[1]

    try:
        success = debug_search_api(client_id)
        check_routes_py()

        if not success:
            suggest_fixes()

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")
        import traceback

        traceback.print_exc()