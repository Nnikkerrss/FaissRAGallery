#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–∫–∞ –æ—à–∏–±–∫–∏ NoneType –≤ –ø–æ–∏—Å–∫–µ
–°–æ—Ö—Ä–∞–Ω–∏ –∫–∞–∫: faiss_vs/debug_none_error.py
"""

import sys
from pathlib import Path
import traceback

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent / "src"))

from src.document_processor import DocumentProcessor


def debug_none_error(client_id: str):
    """
    üêõ –û—Ç–ª–∞–∂–∏–≤–∞–µ–º –æ—à–∏–±–∫—É NoneType
    """
    print("üêõ –û–¢–õ–ê–î–ö–ê –û–®–ò–ë–ö–ò NoneType")
    print("=" * 40)

    try:
        # 1. –°–æ–∑–¥–∞–µ–º processor
        print("üìù –°–æ–∑–¥–∞–µ–º DocumentProcessor...")
        processor = DocumentProcessor(client_id=client_id)
        print("‚úÖ DocumentProcessor —Å–æ–∑–¥–∞–Ω")

        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º FAISS manager
        print("\nüîß –ü—Ä–æ–≤–µ—Ä—è–µ–º FAISSManager...")
        manager = processor.faiss_manager
        print(f"   Client ID: {manager.client_id}")
        print(f"   Enable visual search: {manager.enable_visual_search}")

        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
        print("\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—ã:")
        if hasattr(manager, 'text_index'):
            print(f"   text_index: {manager.text_index}")
            if manager.text_index:
                print(f"   text_index.ntotal: {manager.text_index.ntotal}")

        if hasattr(manager, 'index'):
            print(f"   index: {manager.index}")
            if manager.index:
                print(f"   index.ntotal: {manager.index.ntotal}")

        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        print(f"\nüìã –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:")
        print(f"   metadata: {len(manager.metadata)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        print(f"   id_to_chunk_id: {len(manager.id_to_chunk_id)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")

        if hasattr(manager, 'text_id_to_chunk_id'):
            print(f"   text_id_to_chunk_id: {len(manager.text_id_to_chunk_id)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")

        # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ embeddings
        print(f"\nüß† –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ embeddings...")
        try:
            test_embeddings = manager.create_embeddings(["—Ç–µ—Å—Ç"])
            print(f"   ‚úÖ Embeddings —Å–æ–∑–¥–∞–Ω—ã: shape={test_embeddings.shape}")
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è embeddings: {e}")
            traceback.print_exc()
            return

        # 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–æ —à–∞–≥–∞–º
        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–æ —à–∞–≥–∞–º...")
        query = "—ç–ª–µ–∫—Ç—Ä–∏–∫–∞"

        try:
            print(f"   –®–∞–≥ 1: –°–æ–∑–¥–∞–µ–º embedding –¥–ª—è '{query}'...")
            query_embedding = manager.create_embeddings([query])
            print(f"   ‚úÖ Query embedding: shape={query_embedding.shape}")

            print(f"   –®–∞–≥ 2: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω–¥–µ–∫—Å...")
            if manager.enable_visual_search:
                active_index = manager.text_index
                print(f"   –ê–∫—Ç–∏–≤–Ω—ã–π: text_index ({active_index.ntotal if active_index else 'None'} –≤–µ–∫—Ç–æ—Ä–æ–≤)")
            else:
                active_index = manager.index
                print(f"   –ê–∫—Ç–∏–≤–Ω—ã–π: index ({active_index.ntotal if active_index else 'None'} –≤–µ–∫—Ç–æ—Ä–æ–≤)")

            if active_index is None:
                print(f"   ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω–¥–µ–∫—Å None!")
                return

            print(f"   –®–∞–≥ 3: –í—ã–ø–æ–ª–Ω—è–µ–º FAISS –ø–æ–∏—Å–∫...")
            search_k = min(5, active_index.ntotal)
            scores, indices = active_index.search(query_embedding, search_k)

            print(f"   ‚úÖ FAISS –ø–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω:")
            print(f"      scores: {scores}")
            print(f"      indices: {indices}")
            print(f"      scores[0]: {scores[0] if scores is not None else 'None'}")
            print(f"      indices[0]: {indices[0] if indices is not None else 'None'}")

            if scores is None or indices is None:
                print(f"   ‚ùå –ü–†–û–ë–õ–ï–ú–ê: scores –∏–ª–∏ indices —Ä–∞–≤–Ω—ã None!")
                return

            print(f"   –®–∞–≥ 4: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
            for i, (score, idx) in enumerate(zip(scores[0], indices[0])):
                print(f"      –†–µ–∑—É–ª—å—Ç–∞—Ç {i}: score={score}, idx={idx}")

                if idx == -1:
                    print(f"         –ü—Ä–æ–ø—É—Å–∫–∞–µ–º idx=-1")
                    continue

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥
                if manager.enable_visual_search:
                    chunk_id = manager.text_id_to_chunk_id.get(idx)
                    print(f"         text_id_to_chunk_id[{idx}] = {chunk_id}")
                else:
                    chunk_id = manager.id_to_chunk_id.get(idx)
                    print(f"         id_to_chunk_id[{idx}] = {chunk_id}")

                if chunk_id and chunk_id in manager.metadata:
                    print(f"         ‚úÖ –ù–∞–π–¥–µ–Ω —á–∞–Ω–∫: {chunk_id}")
                else:
                    print(f"         ‚ùå –ß–∞–Ω–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö")

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–∏—Å–∫–µ –ø–æ —à–∞–≥–∞–º: {e}")
            traceback.print_exc()
            return

        # 7. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ manager
        print(f"\nüéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ manager...")
        try:
            results = manager.search(query, k=3)
            print(f"   ‚úÖ –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ manager: {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

            for i, result in enumerate(results):
                print(f"      {i}: {result.get('source_file', 'unknown')} (score: {result.get('score', 0):.3f})")

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ manager.search: {e}")
            traceback.print_exc()

        # 8. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ processor
        print(f"\nüöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ processor...")
        try:
            results = processor.search_documents(query, k=3)
            print(f"   ‚úÖ –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ processor: {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

            for i, result in enumerate(results):
                print(f"      {i}: {result.get('source_file', 'unknown')} (score: {result.get('score', 0):.3f})")

        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤ processor.search_documents: {e}")
            traceback.print_exc()

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        traceback.print_exc()


def check_routes_py():
    """
    üìù –ü—Ä–æ–≤–µ—Ä—è–µ–º routes.py –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –æ—à–∏–±–æ–∫
    """
    print(f"\nüìù –ü–†–û–í–ï–†–ö–ê ROUTES.PY")
    print("=" * 30)

    routes_file = Path("faiss_vs/routes.py")

    if not routes_file.exists():
        print("‚ùå routes.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    with open(routes_file, 'r', encoding='utf-8') as f:
        content = f.read()

    # –ò—â–µ–º —Ñ—É–Ω–∫—Ü–∏—é search
    lines = content.split('\n')
    in_search_function = False
    search_function_lines = []

    for line in lines:
        if 'def search():' in line:
            in_search_function = True
            search_function_lines.append(line)
        elif in_search_function:
            if line.strip() and not line.startswith(' ') and not line.startswith('\t'):
                # –§—É–Ω–∫—Ü–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å
                break
            search_function_lines.append(line)

    print("üìÑ –§—É–Ω–∫—Ü–∏—è search() –≤ routes.py:")
    for line in search_function_lines:
        print(f"   {line}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Å—Ç–∞
    search_code = '\n'.join(search_function_lines)

    if 'processor.search_documents' in search_code:
        print("‚úÖ –í—ã–∑–æ–≤ processor.search_documents –Ω–∞–π–¥–µ–Ω")
    else:
        print("‚ùå –ù–ï–¢ –≤—ã–∑–æ–≤–∞ processor.search_documents!")

    if 'try:' in search_code and 'except:' in search_code:
        print("‚úÖ –ï—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫")
    else:
        print("‚ö†Ô∏è –ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ - —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏—á–∏–Ω–æ–π")


def main():
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python debug_none_error.py <client_id>")
        sys.exit(1)

    client_id = sys.argv[1]

    debug_none_error(client_id)
    check_routes_py()


if __name__ == "__main__":
    main()